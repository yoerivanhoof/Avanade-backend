#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('avanade-backend:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);



var users = [];
var userinfo = [];


io.on('connection', function(socket){
  console.log('a user connected '+socket.handshake.address);

  //function to add username to yourselve
  socket.on('add user', function(msg){
    users.push({
      "ip" : socket.handshake.address,
      "name" : msg
    });
    userinfo.push({
      "ip" : socket.handshake.address,
      "name" : msg,
      "socket" : socket
    });
    socket.emit('response', "ACK");
    io.emit('users',JSON.stringify(users));
  });

  //function to list all connected users
  socket.on('list users', function(){
    socket.emit('users',JSON.stringify(users));
  });


  socket.on('connect to', function(name){// connect to name
    userinfo.forEach(function (value, index) {
      if(value.name == name){

        userinfo.forEach(function (value1, index1) {
          if(value1.socket.id == socket.id){
            console.log(value1.name +" wants to connect to "+name);


            var chat = io.of("/"+value.socket.id+""+value1.socket.id);
            chat.on('connection', function (socket2) {
              console.log(socket2.handshake.address + " joined namespace");

              socket2.on('chat message', function(msg){
                  console.log("received "+msg);
                  socket2.broadcast.emit('chat message',msg);
                  //chat.broad.emit('chat message', msg);


              });

            });

            var connectinfo = {
              'name':value1.name,
              'namespace':"/"+value.socket.id+""+value1.socket.id
            };
            value.socket.emit('connect request', JSON.stringify(connectinfo) );

            var connectinfo1 = {
              'name':value.name,
              'namespace':"/"+value.socket.id+""+value1.socket.id
            };
            value1.socket.emit('connect request', JSON.stringify(connectinfo1 ));




          }
        });


      }
    })
  });


  //function to remove user from connected users
  socket.on('disconnect', function(){
    console.log('user disconnected'+socket.handshake.address);
    io.emit('users',JSON.stringify(users));
  });






















});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
